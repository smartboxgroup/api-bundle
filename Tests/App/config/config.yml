imports:
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@SmartboxApiBundle/Resources/config/config.yml" }

parameters:
    smartapi.rate_response_message: 'You exceeded the rate limit'
    user_list.file.dir: '%kernel.root_dir%/../Fixtures/UserProvider'
    usersFile: "%kernel.root_dir%/Tests/Fixtures/UserProvider/valid_config.yml"
    passwordsFile: "%kernel.root_dir%/Tests/Fixtures/UserProvider/passwords.yml"

framework:
    test: ~
    secret: "5yg6u543wrftg34"
    validation:      { enable_annotations: true }

    router:
        resource: '%kernel.root_dir%/config/routing.yml'
        strict_requirements: ~

    templating:
        engines: ['twig']

monolog:
    handlers:
        main:
            type: stream
            path: '%kernel.logs_dir%/%kernel.environment%.log'
            level: info
            channels: ['!event']
        console:
            type:                console
            verbosity_levels:
                VERBOSITY_NORMAL:       WARNING
                VERBOSITY_VERBOSE:      NOTICE
                VERBOSITY_VERY_VERBOSE: INFO
                VERBOSITY_DEBUG:        DEBUG

noxlogic_rate_limit:
    storage_engine:             redis
    redis_client:               default_client
    rate_response_message:      '%smartapi.rate_response_message%'
    display_headers:            true

snc_redis:
    clients:
        default:
            type: predis
            alias: default
            dsn: redis://redis

be_simple_soap:
    services:
        demo_v1:
            namespace:     http://localhost/api/soap/demo_v1/
            binding:       rpc-literal
            resource:      demo_v1
            resource_type: smartapi_soap
        throttling_v1:
            namespace:     http://localhost/api/soap/throttling_v1/
            binding:       rpc-literal
            resource:      throttling_v1
            resource_type: smartapi_soap
        sdk_v0:
            namespace:     http://localhost/api/soap/sdk_v0/
            binding:       rpc-literal
            resource:      sdk_v0
            resource_type: smartapi_soap

smartbox_core:
  cache_drivers:
    'null':
      service: ~

smartbox_api:
    userProvider: smartapi.security.user_provider
    usersFile: '%user_list.file.dir%/users.yml'
    passwordsFile: '%user_list.file.dir%/passwords.yml'
    restEmptyBodyResponseCodes: []
    default_controller: "test.dummy.controller:handleCallAction"

    errorCodes:
       400: Bad Request, the request could not be understood by the server due to malformed syntax
       401: Unauthorized, the request requires user authentication
       403: Forbidden, the server understood the request, but is refusing to fulfill it
       404: Not Found, the server has not found anything matching the Request-URI

    successCodes:
       200: Success, the information returned with the response is dependent on the method used in the request
       201: Created, the request has been fulfilled and resulted in a new resource being created
       202: Accepted, the request has been accepted for processing, but the processing has not been completed
       204: No content, the server has fulfilled the request but does not need to return an entity-body

    throttling: true

    services:
        sdk_v0:
            name: sdk
            version: v0
            soapHeadersNamespace: http://smartbox/soap
            methods:
                testWithBody:
                    description: Method to send an entity
                    successCode: 201
                    input:
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: update, mode: body }
                    rest:
                        route: "/test1/url"
                        httpMethod: POST
                testWithArrayBody:
                    description: Method to send an array of entity
                    successCode: 201
                    input:
                        box: { type: 'Smartbox\ApiBundle\Tests\Fixtures\Entity\Box[]', group: update, mode: body }
                    rest:
                        route: "/test1/url"
                        httpMethod: POST
                testWithRequirements:
                    description: Method using variable in the URI
                    input:
                        id: { type: integer, format: \d+ }
                    output: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: public }
                    rest:
                      route: "/test2/{id}"
                      httpMethod: GET
                    defaults:
                      id: 90
                testWithFilters:
                    description: Method using filters
                    input:
                        size: { type: number, format: '[\d.]+', mode: filter }
                        limit: { type: integer, format: \d+, mode: filter }
                        page: { type: integer, format: \d+, mode: filter }
                        listOfNumber:
                            type: number[]
                            mode: filter
                            format: .+
                        listOfString:
                            type: string[]
                            mode: filter
                            format: foo|bar|baz
                    #output: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: public }
                    rest:
                      route: "/test3/filters"
                      httpMethod: GET
                    defaults:
                      id: 90
                testWithHeadersAndFiltersAndBody:
                    description: Method using a body, filters, headers and dynamic url
                    input:
                        size: { type: integer, format: \d+, mode: filter }
                        limit: { type: integer, format: \d+, mode: filter }
                        page: { type: integer, format: \d+, mode: filter }
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: update, mode: body }
                        id: { type: string, format: \d+ }
                    output: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: public }
                    rest:
                      route: "/test4/full/{id}"
                      httpMethod: GET
                    defaults:
                      id: 90
                    headers: ["brand", "country"]
        demo_v1:
            name: demo
            version: v1
            soapHeadersNamespace: http://smartbox.com/soap/headers
            methods:

            ## BOXES
                createBox:
                    description: Creates a box with the given information and returns its id
                    successCode: 201
                    input:
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: update, mode: body }
                    rest:
                        route: "/box"
                        httpMethod: POST
                getBox:
                    description: Returns a box given its id
                    successCode: 200
                    input:
                        id: { type: integer, description: Id of the box to be fetched, format: \d+ }
                    output: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: public }
                    rest:
                      route: "/box/{id}"
                      httpMethod: GET
                    defaults:
                      id: 90
                getBoxes:
                    description: Returns boxes
                    successCode: 200
                    input:
                        quantity:
                            type: integer
                            description: Quantity of boxes to be fetched
                            format: \d+
                    output:
                        type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box[]
                        group: public
                        limitElements: 2
                    rest:
                      route: "/boxes/{quantity}"
                      httpMethod: GET
                    defaults:
                      quantity: 1
                updateBox:
                    description: Updates a box
                    successCode: 204
                    input:
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Box, group: update, mode: body }
                        id: { type: integer, description: Id of the box to be updated, format: \d+ }
                    rest:
                        route: "/box/{id}"
                        httpMethod: PUT
                createBoxes:
                    description: Creates boxes in a batch asynchronously
                    successCode: 202
                    input:
                        boxes: { type: 'Smartbox\ApiBundle\Tests\Fixtures\Entity\Box[]', group: update, mode: body }
                    rest:
                        route: "/box/batch"
                        httpMethod: POST
                setBoxPicked:
                    description: Confirms the pick up of a box to the system.
                    successCode: 204
                    input:
                        id: { type: integer, description: Id of the picked box, format: \d+ }
                    rest:
                        route: "/box/{id}/picked"
                        httpMethod: PUT
                deleteBox:
                    description: "Deletes a box"
                    successCode: 204
                    input:
                        id: { type: integer, description: Id of the box to be deleted, format: \d+ }
                    rest:
                        route: "/box/{id}"
                        httpMethod: DELETE
                    roles:
                      - ROLE_ADMIN

        throttling_v1:
            name: throttling
            version: v1
            soapHeadersNamespace: http://smartbox/soap
            methods:
                createItem:
                    description: Creates an item with the given information and returns its id
                    successCode: 201
                    input:
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Item, group: create, mode: body }
                    rest:
                        route: "/item"
                        httpMethod: POST
                    throttling:
                        limit: 2
                        period: 3
                getItem:
                    description: Returns an item for given id
                    input:
                        id: { type: integer, description: Id of the item to be fetched, format: \d+ }
                    output: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Item, group: public }
                    rest:
                      route: "/item/{id}"
                      httpMethod: GET
                    throttling:
                        limit: 2
                        period: 10
                updateItem:
                    description: Updates an item
                    successCode: 204
                    input:
                        box: { type: Smartbox\ApiBundle\Tests\Fixtures\Entity\Item, group: update, mode: body }
                        id: { type: integer, description: Id of an item to be updated, format: \d+ }
                    rest:
                        route: "/item/{id}"
                        httpMethod: PUT
                    throttling:
                        limit: 2
                        period: 3
                deleteItem:
                    description: "Deletes an item"
                    successCode: 204
                    input:
                        id: { type: integer, description: Id of an item to be deleted, format: \d+ }
                    rest:
                        route: "/item/{id}"
                        httpMethod: DELETE
                    throttling:
                        limit: 2
                        period: 3
